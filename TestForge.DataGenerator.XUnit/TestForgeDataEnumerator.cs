using System.Collections;

namespace TestForge.DataGenerator.XUnit;

/// <summary>
/// enumerable created by the TestForgeClassDataAttribute as part of the ClassData theory test run
/// </summary>
/// <typeparam name="T"></typeparam>
public class TestForgeDataEnumerator : IEnumerable<object[]>
{

    TestForgeDataEnumeratorConfiguration _configuration;
    int _currentCount = 0;

    public TestForgeDataEnumerator(TestForgeDataEnumeratorConfiguration configuration)
    {
        _configuration = configuration;
    }

    /// <summary>
    /// returns an enumerator of items generated by the generator returned from GetGenerator
    /// </summary>
    /// <returns></returns>
    public IEnumerator<object[]> GetEnumerator()
    {

        GeneratorContext context = new GeneratorContext(_configuration.PrimarySeed);

        var paramList = _configuration.TestMethodInformation.GetParameters().ToList();

        ParameterArrayGenerator paramGenerator = new ParameterArrayGenerator(paramList, this);

        if (_configuration.ConfigurationTypeEnum == ConfigurationTypeEnum.IterationAndPrimarySeed)
        {
            while (_currentCount < _configuration.Iterations)
            {
                _currentCount++;

                var parameterArray = paramGenerator.BuildParameterArray(context.Random.Next(), _currentCount);
                yield return parameterArray;
            }
        }
        else if (_configuration.ConfigurationTypeEnum == ConfigurationTypeEnum.SpecificSeeds)
        {
            foreach(int specificSeed in _configuration.SpecificSeeds)
            {
                _currentCount++;

                var parameterArray = paramGenerator.BuildParameterArray(specificSeed, _currentCount);
                yield return parameterArray;
            }
        }
    }

    /// <summary>
    /// the non-generic IEnumerator GetEnumerator
    /// </summary>
    /// <returns></returns>
    IEnumerator IEnumerable.GetEnumerator()
    {
        return this.GetEnumerator();
    }

}
    


